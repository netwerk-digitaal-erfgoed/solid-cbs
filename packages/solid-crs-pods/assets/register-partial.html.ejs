
<%
const isBlankForm = !('prefilled' in locals);
prefilled = locals.prefilled || {};
%>

<h2>Uw WebID</h2>
<p>
  Een WebID is een unieke identificatie voor u in de vorm van een URL.
  <br>
  Met uw WebID kunt u inloggen bij Solid-apps en toegang krijgen tot niet-openbare gegevens in Pods.
</p>
<ol>
  <li hidden class="radio">
    <label>
      <input type="radio" id="createWebIdOn" name="createWebId" value="on"<%
      if (isBlankForm || prefilled.createWebId) { %> checked<% } %>>
      Maak een nieuwe WebID voor mijn Pod.
    </label>
    <p id="createWebIdForm">
      Maak hieronder ook een Pod aan, aangezien uw WebID daar wordt opgeslagen.
    </p>
  </li>
  <li class="radio">
    <label>
      <input hidden type="radio" id="createWebIdOff" name="createWebId" value=""<% { %> checked<% } %>>
    </label>
    <ol id="existingWebIdForm">
      <li>
        <label for="webId">Uw WebID:</label>
        <input id="webId" type="text" name="webId" value="<%= prefilled.webId || '' %>">
      </li>
      <li hidden class="checkbox">
        <label>
          <input type="checkbox" id="register" name="register"<% { %> unchecked<% } %>>
          Gebruik mijn nieuwe account om in te loggen met deze WebID.
        </label>
      </li>
    </ol>
  </li>
</ol>
<h2>Uw Pod</h2>
<p>
  Een Pod is een opslagplaats voor uw gegevens.
</p>
<ol>
  <li class="checkbox">
    <label>
      <input hidden type="checkbox" id="createPod" name="createPod"<% { %> checked<% } %>>
    </label>
    <ol id="createPodForm">
      <% if (locals.allowRoot) { %>
        <li class="radio">
          <label>
            <input type="radio" id="rootPodOn" name="rootPod" value="on"<%
            if (isBlankForm || prefilled.rootPod) { %> checked<% } %>>
            …in de root.
          </label>
        </li>
        <li class="radio">
          <label>
            <input type="radio" id="rootPodOff" name="rootPod" value=""<%
            if (!isBlankForm && !prefilled.rootPod) { %> checked<% } %>>
            …in zijn eigen namespace.
          </label>
        </li>
      <% } %>
      <li id="podNameForm">
        <label for="podName">Kies een naam voor uw pod:</label>
        <input id="podName" type="text" name="podName" value="<%= prefilled.podName || '' %>">
      </li>
    </ol>
  </li>
</ol>
<h2>Uw account</h2>
<div>
  <p>
    Kies de inloggegevens die u wilt gebruiken om in de toekomst op deze server in te loggen.
  </p>
  <ol>
    <li>
      <label for="email">Email:</label>
      <input id="email" type="text" name="email" value="<%= prefilled.email || '' %>" >
    </li>
  </ol>
  <ol id="passwordForm">
    <li>
      <label for="password">Wachtwoord:</label>
      <input id="password" type="password" name="password">
    </li>
    <li>
      <label for="confirmPassword">Bevestig wachtwoord:</label>
      <input id="confirmPassword" type="password" name="confirmPassword">
    </li>
  </ol>
</div>

<!-- Assist the user with filling out the form by hiding irrelevant fields -->
<script>
const elements = {};
// Wires up the DOM element with the specified ID
function registerElement(id) {
  const element = document.getElementById(id) || document.createElement('input');
  elements[id] = element;
  element.addEventListener('change', synchronizeInputFields);
}
// Wire up all elements
[
  'mainForm',
  'createWebIdOn', 'createWebIdOff', 'createWebIdForm', 'existingWebIdForm', 'webId',
  'createPod', 'createPodForm', 'rootPodOn', 'rootPodOff', 'podNameForm', 'podName',
  'register', 'passwordForm',
].forEach(registerElement);
// Conditions under which elements should be visible
const visibilityConditions = {
  createWebIdForm: () => elements.createWebIdOn.checked,
  existingWebIdForm: () => elements.createWebIdOff.checked,
  createPodForm: () => elements.createPod.checked,
  podNameForm: () => !elements.rootPodOn.checked,
};
// Ensures that the only relevant input fields are visible and enabled
function synchronizeInputFields({ srcElement } = {}) {
  // The user needs a Pod if they want to create a WebID
  if (elements.createWebIdOn.checked)
    elements.createPod.checked = true;
  // Hide irrelevant fields
  for (const [id, condition] of Object.entries(visibilityConditions))
    setVisibility(id, condition());
  // Lock pod creation if a WebID is requested
  elements.createPod.disabled = elements.createWebIdOn.checked;
  // If child elements have just been activated, focus on them
  if (srcElement?.checked) {
    switch(document.activeElement) {
    case elements.createWebIdOff:
      const { webId } = elements;
      webId.value = webId.value.startsWith('http') ? webId.value : 'https://';
      webId.focus();
      break;
    case elements.createPod:
    case elements.rootPodOff:
      elements.podName.focus();
      break;
    }
  }
}
// Checks whether the given element is visible
function isVisible(element) {
  return !(elements[element] ?? element).classList.contains('hidden');
}
// Sets the visibility of the given element
function setVisibility(element, visible) {
  // Show or hide the element
  element = elements[element] ?? element;
  element.classList[visible ? 'remove' : 'add']('hidden');
  // Disable children of hidden elements,
  // such that the browser does not expect input for them
  for (const child of getDescendants(element)) {
    if ('disabled' in child)
      child.disabled = !visible;
  }
}
// Obtains all children, grandchildren, etc. of the given element
function getDescendants(element) {
  return [...element.querySelectorAll("*")];
}
// Prepare the form when the DOM is ready
window.addEventListener('DOMContentLoaded', (event) => {
  synchronizeInputFields();
  elements.mainForm.classList.add('loaded');
});
// Enable all elements on form submission (otherwise their value is not submitted)
elements.mainForm.addEventListener('submit', () => {
  for (const child of getDescendants(elements.mainForm)) {
    if (child.name)
      child.disabled = false;
  }
});
elements.mainForm.addEventListener('formdata', synchronizeInputFields);
</script>