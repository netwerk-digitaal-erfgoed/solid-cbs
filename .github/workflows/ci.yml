name: CI

on: push

jobs:
  variables:
    name: Set variables
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      image_manage: ${{ steps.vars.outputs.image_manage }}
      image_presentation: ${{ steps.vars.outputs.image_presentation }}
      image_semcom_node: ${{ steps.vars.outputs.image_semcom_node }}
      image_semcom_components: ${{ steps.vars.outputs.image_semcom_components }}
    steps:
      - name: Set variables
        id: vars
        run: |
          echo "::set-output name=tag::${GITHUB_REF/refs\/tags\//}"
          echo "::set-output name=image_manage::ghcr.io/netwerk-digitaal-erfgoed/solid-crs-manage"
          echo "::set-output name=image_presentation::ghcr.io/netwerk-digitaal-erfgoed/solid-crs-presentation"
          echo "::set-output name=image_semcom_node::ghcr.io/netwerk-digitaal-erfgoed/solid-crs-semcom-node"
          echo "::set-output name=image_semcom_components::ghcr.io/netwerk-digitaal-erfgoed/solid-crs-semcom-components"

  test:
    name: Run tests
    needs: variables
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Check tag
        run: echo ${{ needs.variables.outputs.tag }}

      - name: Extract branch
        id: extract-branch
        run: echo "::set-output name=branch::${GITHUB_REF/refs\/heads\//}"

      - name: Check branch
        run: echo ${{ steps.extract-branch.outputs.branch }}

      - uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: https://npm.pkg.github.com

      - run: npm run bootstrap
        env:
          NODE_AUTH_TOKEN: ${{ secrets.DIGITA_PACKAGES }}

      - run: npm run build:all

      - run: npm run lint:all

      - run: npm run test:ci

  release:
    name: Create release
    needs: test
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'feat/loan' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  publish-npm:
    name: Publish NPM packages
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'feat/loan' }}
    needs: [variables, release]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: https://npm.pkg.github.com/

      - run: npm run bootstrap
        env:
          NODE_AUTH_TOKEN: ${{ secrets.DIGITA_PACKAGES }}

      - run: npm run build:all

      - run: npm publish packages/solid-crs-theme
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - run: npm publish packages/solid-crs-core
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - run: npm publish packages/solid-crs-components
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - run: npm publish packages/solid-crs-semcom-components
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  publish-docker:
    name: Publish Docker images
    needs: [variables, publish-npm]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'feat/loan' }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}

      - name: Build and push manage
        uses: docker/build-push-action@v2
        with:
          context: packages/solid-crs-manage/
          push: true
          tags: |
            ${{ needs.variables.outputs.image_manage }}:latest
            ${{ needs.variables.outputs.image_manage }}:${{ needs.variables.outputs.tag }}
          build-args: |
            NPM_TOKEN=${{secrets.DIGITA_PACKAGES}}

      - name: Build and push presentation
        uses: docker/build-push-action@v2
        with:
          context: packages/solid-crs-presentation/
          push: true
          tags: |
            ${{ needs.variables.outputs.image_presentation }}:latest
            ${{ needs.variables.outputs.image_presentation }}:${{ needs.variables.outputs.tag }}
          build-args: |
            NPM_TOKEN=${{secrets.DIGITA_PACKAGES}}

      - name: Build and push semcom-node
        uses: docker/build-push-action@v2
        with:
          context: packages/solid-crs-semcom-node/
          push: true
          tags: |
            ${{ needs.variables.outputs.image_semcom_node }}:latest
            ${{ needs.variables.outputs.image_semcom_node }}:${{ needs.variables.outputs.tag }}
          build-args: |
            NPM_TOKEN=${{secrets.DIGITA_PACKAGES}}

      - name: Build and push semcom-components
        uses: docker/build-push-action@v2
        with:
          context: packages/solid-crs-semcom-components/
          push: true
          tags: |
            ${{ needs.variables.outputs.image_semcom_components }}:latest
            ${{ needs.variables.outputs.image_semcom_components }}:${{ needs.variables.outputs.tag }}
          build-args: |
            NPM_TOKEN=${{secrets.DIGITA_PACKAGES}}

      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Store DigitalOcean credentials
        run: doctl kubernetes cluster kubeconfig save nde

      # See https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment
      - name: Update deployment
        run: |
          kubectl set image deployment/solid-crs-manage app=${{ needs.variables.outputs.image_manage }}:${{ needs.variables.outputs.tag }} --record
          kubectl set image deployment/solid-crs-presentation app=${{ needs.variables.outputs.image_presentation }}:${{ needs.variables.outputs.tag }} --record
          kubectl set image deployment/solid-crs-semcom-node app=${{ needs.variables.outputs.image_semcom_node }}:${{ needs.variables.outputs.tag }} --record
          kubectl set image deployment/solid-crs-semcom-components app=${{ needs.variables.outputs.image_semcom_components }}:${{ needs.variables.outputs.tag }} --record

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/solid-crs-manage
          kubectl rollout status deployment/solid-crs-presentation
          kubectl rollout status deployment/solid-crs-semcom-node
          kubectl rollout status deployment/solid-crs-semcom-components
