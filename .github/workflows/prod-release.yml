name: Publish graduated release

on:

  workflow_dispatch:

  pull_request:
  
    types: [closed]
  
    branches:
      - master

jobs:
  variables:
    name: Set variables
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      image_manage: ${{ steps.vars.outputs.image_manage }}
      image_presentation: ${{ steps.vars.outputs.image_presentation }}
      image_semcom_node: ${{ steps.vars.outputs.image_semcom_node }}
      image_semcom_components: ${{ steps.vars.outputs.image_semcom_components }}
      image_pods: ${{ steps.vars.outputs.image_pods }}
      image_id_proxy: ${{ steps.vars.outputs.image_id_proxy }}
      image_webid: ${{ steps.vars.outputs.image_webid }}
    steps:
      - name: Set variables
        id: vars
        run: |
          echo "::set-output name=tag::${GITHUB_REF/refs\/tags\//}"
          echo "::set-output name=image_manage::ghcr.io/netwerk-digitaal-erfgoed/solid-crs-manage"
          echo "::set-output name=image_presentation::ghcr.io/netwerk-digitaal-erfgoed/solid-crs-presentation"
          echo "::set-output name=image_semcom_node::ghcr.io/netwerk-digitaal-erfgoed/solid-crs-semcom-node"
          echo "::set-output name=image_semcom_components::ghcr.io/netwerk-digitaal-erfgoed/solid-crs-semcom-components"
          echo "::set-output name=image_pods::ghcr.io/netwerk-digitaal-erfgoed/solid-crs-pods"
          echo "::set-output name=image_id_proxy::ghcr.io/netwerk-digitaal-erfgoed/solid-crs-id-proxy"
          echo "::set-output name=image_webid::ghcr.io/netwerk-digitaal-erfgoed/solid-crs-webid"

  perform-checks:
    name: Perform checks
    uses: netwerk-digitaal-erfgoed/solid-crs/.github/workflows/checks.yml@master
    secrets:
      DIGITA_PACKAGES: ${{ secrets.DIGITA_PACKAGES }}

  publish-npm:
    name: Publish NPM packages
    runs-on: ubuntu-latest
    needs: [variables, perform-checks]
    outputs:
      version: ${{steps.discover-version.outputs.prop}}

    steps:
    
      - name: Checkout ref
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch more tags
        run: git fetch --tags

      - name: Configure git
        run: | 
          git config user.name ${{github.actor}}
          git config user.email ${{github.actor}}@users.noreply.github.com
          git remote set-url origin https://${{github.actor}}:${{secrets.ACTIONS_PUSH}}@github.com/${{github.repository}}.git

      - uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: https://npm.pkg.github.com/

      - run: npm run bootstrap
        env:
          NODE_AUTH_TOKEN: ${{ secrets.DIGITA_PACKAGES }}

      - name: Build packages
        run: npm run build:all
          
      - name: Publish packages
        id: publish-packages
        run: npx lerna publish --no-verify-access --conventional-commits --conventional-graduate --yes --no-push
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Git reset
        run: git reset HEAD --hard && git status

      - name: Discover version
        id: discover-version
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: 'lerna.json'
          prop_path: 'version'
          
      - name: Push changes
        run: git -c "http.https://github.com/.extraheader=" push

      

  publish-docker:
    name: Publish Docker images
    needs: [variables, publish-npm]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}

      - name: Build and push manage
        uses: docker/build-push-action@v2
        with:
          context: packages/solid-crs-manage/
          push: true
          tags: |
            ${{ needs.variables.outputs.image_manage }}:latest
            ${{ needs.variables.outputs.image_manage }}:${{needs.publish-npm.outputs.version}}
          build-args: |
            NPM_TOKEN=${{secrets.DIGITA_PACKAGES}}

      - name: Build and push presentation
        uses: docker/build-push-action@v2
        with:
          context: packages/solid-crs-presentation/
          push: true
          tags: |
            ${{ needs.variables.outputs.image_presentation }}:latest
            ${{ needs.variables.outputs.image_presentation }}:${{needs.publish-npm.outputs.version}}
          build-args: |
            NPM_TOKEN=${{secrets.DIGITA_PACKAGES}}

      - name: Build and push semcom-node
        uses: docker/build-push-action@v2
        with:
          context: packages/solid-crs-semcom-node/
          push: true
          tags: |
            ${{ needs.variables.outputs.image_semcom_node }}:latest
            ${{ needs.variables.outputs.image_semcom_node }}:${{needs.publish-npm.outputs.version}}
          build-args: |
            NPM_TOKEN=${{secrets.DIGITA_PACKAGES}}

      - name: Build and push semcom-components
        uses: docker/build-push-action@v2
        with:
          context: packages/solid-crs-semcom-components/
          push: true
          tags: |
            ${{ needs.variables.outputs.image_semcom_components }}:latest
            ${{ needs.variables.outputs.image_semcom_components }}:${{needs.publish-npm.outputs.version}}
          build-args: |
            NPM_TOKEN=${{secrets.DIGITA_PACKAGES}}

      - name: Build and push pods
        uses: docker/build-push-action@v2
        with:
          context: packages/solid-crs-pods/
          push: true
          tags: |
            ${{ needs.variables.outputs.image_pods }}:latest
            ${{ needs.variables.outputs.image_pods }}:${{needs.publish-npm.outputs.version}}
          build-args: |
            NPM_TOKEN=${{secrets.DIGITA_PACKAGES}}

      - name: Build and push id proxy
        uses: docker/build-push-action@v2
        with:
          context: packages/solid-crs-id-proxy/
          push: true
          tags: |
            ${{ needs.variables.outputs.image_id_proxy }}:latest
            ${{ needs.variables.outputs.image_id_proxy }}:${{needs.publish-npm.outputs.version}}
          build-args: |
            NPM_TOKEN=${{secrets.DIGITA_PACKAGES}}

      - name: Build and push webid
        uses: docker/build-push-action@v2
        with:
          context: packages/solid-crs-webid/
          push: true
          tags: |
            ${{ needs.variables.outputs.image_webid }}:latest
            ${{ needs.variables.outputs.image_webid }}:${{needs.publish-npm.outputs.version}}
          build-args: |
            NPM_TOKEN=${{secrets.DIGITA_PACKAGES}}

      - uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Store DigitalOcean credentials
        run: doctl kubernetes cluster kubeconfig save nde

      # See https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#updating-a-deployment
      - name: Update deployment
        run: |
          kubectl set image deployment/solid-crs-manage app=${{ needs.variables.outputs.image_manage }}:${{ needs.variables.outputs.tag }} --record
          kubectl set image deployment/solid-crs-presentation app=${{ needs.variables.outputs.image_presentation }}:${{ needs.variables.outputs.tag }} --record
          kubectl set image deployment/solid-crs-semcom-node app=${{ needs.variables.outputs.image_semcom_node }}:${{ needs.variables.outputs.tag }} --record
          kubectl set image deployment/solid-crs-semcom-components app=${{ needs.variables.outputs.image_semcom_components }}:${{ needs.variables.outputs.tag }} --record
          kubectl set image deployment/solid-crs-id-proxy app=${{ needs.variables.outputs.image_id_proxy }}:${{ needs.variables.outputs.tag }} --record
          kubectl set image statefulset/solid-crs-pods app=${{ needs.variables.outputs.image_pods }}:${{ needs.variables.outputs.tag }} --record
          kubectl set image statefulset/solid-crs-webid app=${{ needs.variables.outputs.image_webid }}:${{ needs.variables.outputs.tag }} --record

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/solid-crs-manage
          kubectl rollout status deployment/solid-crs-presentation
          kubectl rollout status deployment/solid-crs-semcom-node
          kubectl rollout status deployment/solid-crs-semcom-components
          kubectl rollout status deployment/solid-crs-id-proxy
          kubectl rollout status statefulset/solid-crs-pods
          kubectl rollout status statefulset/solid-crs-webid
